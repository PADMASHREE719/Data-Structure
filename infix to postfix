#include<stdio.h>
#include<stdlib.h>
#include<ctype.h>
#define MAX 100

void push(char stack[],int *top,int value)
{
    if(*top==MAX-1)
    {
        printf("\n stack is full");
    }
    else
    {
        (*top)++;
        stack[*top]=value;
    }
}

char pop(char stack[],int *top)
{
    if(*top==-1) //**
    {
        return '\0'; //**
    }
    else
    {
        char popped_value=stack[*top];
        (*top)--;
        return popped_value;
    }
}

int precedence(char ch)
{
    switch(ch)
    {
        case '+':
        case '-':
                    return 1;
        case '*':
        case '/':
                    return 2;
        case '^':
                    return 3;
        default: return 0;
    }
}

void infixtopostfix(char infix[],char postfix[])
{
    char stack[MAX];
    int top=-1,i=0,j=0;
    while(infix[i]!='\0')
    {
        char symbol=infix[i];
        if(isalnum(symbol))
        {
            postfix[j++]=symbol;
        }
        else if(symbol=='(')
        {
            push(stack,&top,symbol);
        }
        else if(symbol==')')
        {
            while(top!=-1&&stack[top]!='(')
            {
                postfix[j++]=pop(stack,&top);
            }
            pop(stack,&top);
        }
        else
        {
            while(top!=-1&&precedence(stack[top])>=precedence(symbol)) //**
            {
                postfix[j++]=pop(stack,&top);
            }
            push(stack,&top,symbol);
        }
        i++; \\******
    }
    while(top!=-1)
    {
        postfix[j++]=pop(stack,&top);
    }
    postfix[j]='\0';  \\('\0' not in " " and j++ is not required here)
}

int main()
{
    char infix[MAX],postfix[MAX];
    printf("\n enter infix expression");
    scanf("%s",infix); //**
    infixtopostfix(infix,postfix);
    printf("%s postfix expression",postfix);
    return 0;
}
